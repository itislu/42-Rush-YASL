#!./yasl_linux_x64

{ print "\n" print } print_endl

{ = print_endl } print_lossless

{
	# %? #(
		print_lossless
		# !^
	)
	"\n" print
} print_stack_lossless

{ = ! } move

{
	"Error: Invalid input!" print_endl
	1 exit
} error

{
	{
		= = 4 /
		4 * !=
	} is_not_perfect_square

	{
		= 9:= > ? (
			// not yet found
			7:(1 +):7
			8:(2 +):8
			9:(8:= +):9
			// 8:=:9 +
			find_square_root
		) : ( = 9:= == ? (
			// found square
			7:move
		) : (
			// not a square
			error //? 3 excess chars are still allowed atm
		) )
	} find_square_root

	// 7: root
	// 8: diff
	// 9: square
	{
		1:7
		1:8
		1:9
		find_square_root
		7:(# ? #!):7
		8:(# ? #!):8
		9:(# ? #!):9
	} square_root

 	is_not_perfect_square ? error
	= 4 /
	square_root
} calc_side_len

// 0: input
// 1: input length
// 2: side length px
// 3: index
// 4: RGB pixels
// 5: groups of 4 base64 indeces (converted from input)

!!

{
	""
	0:1
	1 @ (
		read
		%? (
			0:move:1 1:+:1
			+
			1
		) : (!! 0)
	)
} read_input

read_input

// image
// 0:-----

// 4096
// 1:-----


1:calc_side_len:1
1:move:2

{
	{
		"A" %>= move:2 !
		"Z" %<= move:2 !
		2:&&
	} is_upper

	{
		"a" %>= move:2 !
		"z" %<= move:2 !
		2:&&
	} is_lower

	{
		"0" %>= move:2 !
		"9" %<= move:2 !
		2:&&
	} is_digit

	is_upper ? ("A" -) : (
		is_lower ? ("a" - 26 +) : (
			is_digit ? ("0" - 52 +) : (
				= "+" == ? (! 62) : (
					= "/" == ? (! 63) : error
				)
			)
		)
	)
} base64_index

// convert base64 indeces on stack 9 to groups of 4 on stack 5
{
	4:9 9:[]:5
} group_base64_indeces

// 3: index
// 9: base64 indeces (converted from input)
0:3
[#] #(
	3:=
	%]#[
	base64_index move:9
	!
	3:(= 1 +):3
	3:= 4 % 0 == ? group_base64_indeces
)



// 4: RGB pixels
// 5: groups of 4 base64 indeces (converted from input)
// 6: 1st num
// 7: 2nd num
// 8: 3rd num
// 9: 4th num
{
	{
		6:(= 2 << 255 & move:4):6
		7:(= 4 >> move:4):7
		4:(|):4
	} red

	{
		7:(= 4 << 255 & move:4):7
		8:(= 2 >> move:4):8
		4:(|):4
	} green

	{
		8:(= 6 << 255 & move:4):8
		9:(= move:4):9	// 63 &
		4:(|):4
	} blue

	5:move
	][ ! move:9 move:8 move:7 move:6

	red
	green
	blue

	6:!:6 7:!:7 8:!:8 9:!:9
	4:(3 []):4
} to_rgb

5:# #to_rgb

!

// 7: red
// 8: green
// 9: blue
{
	{
		7:("" +):7 7:move
	} red

	{
		8:("" +):8 8:move
	} green

	{
		9:("" +):9 9:move
	} blue

	4:move ][ !

	move:9 move:8 move:7

	"\e[48;2;" red + ";" + green + ";" + blue + "m" + "  " + "\e[m" +
} pixel_to_ansii

{
	1 +
	2:=
	% 0 ==
} is_end_of_line

""
0:3
4:# #(
	pixel_to_ansii +
	3:=
	is_end_of_line ? ("\n" +)
	3:(= 1 +):3
)

print



// "":4
// 0:3
// [#] %? (
// 	#(
// 		3:=		// current index
// 		%]#[	// current char
// 		move:4 4:+:4
// 		// index
// 		// 0:---
// 		is_end_of_line ? ("\n":4 4:+:4)
// 		3:(= 1 +):3
// 	)
// ) : error

// 4:print




// 3: index
// 9: base64 char
// {
// 	move:9
// 	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
// 	0:3
// 	[#] #(
// 		3:=
// 		%]#[
// 		9:= == ?
// 		3:(= 1 +):3
// 	)

// } base64_index
